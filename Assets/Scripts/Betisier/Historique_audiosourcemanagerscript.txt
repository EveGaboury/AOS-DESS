using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Audio;

public class AudioSourceManagerScript : MonoBehaviour 
{
	//public float resetVolumeValueAfterPlayingSound;

	public AudioSource audioSourceData, audioSourceBoutons, audioSourceClicksEtTyping, audioSourceCueEmotion, audioSourceMusique;

	AudioSource[] audioSourcesAttachedToTheSoundManager;

	AudioClip cueEmotion;

	GameObject fetchGameState;

	[HideInInspector]
	public float m_value, plus = 0.032f, minus = -0.016f;

	void Awake()
	{
		DetectAudioSources ();

		fetchGameState = GameObject.Find ("ScriptManager");
	}

	void Update()
	{
		if (audioSourceCueEmotion.isPlaying && (audioSourceCueEmotion.clip.name == "Cue 1 Eureka" || audioSourceCueEmotion.clip.name == "Cue 2 Sadness _ I want to know" ||audioSourceCueEmotion.clip.name == "Cue 3 World upside down")) 
		{
			if (audioSourceCueEmotion.clip.name == "Cue 1 Eureka")
			{
				Debug.Log ("Yay! " + "Cue 1 Eureka");

				m_value = minus;
				StartCoroutine (CueSound());
			}
			else if (audioSourceCueEmotion.clip.name == "Cue 2 Sadness _ I want to know")
			{
				Debug.Log ("Yay! " + "Cue 2 Sadness _ I want to know");

				m_value = minus;
				StartCoroutine (CueSound());
			}
			else if (audioSourceCueEmotion.clip.name == "Cue 3 World upside down") 
			{
				Debug.Log ("Yay! " + "Cue 3 World upside down");

				m_value = minus;
				StartCoroutine (CueSound());
			}
		}
//		else if (!audioSourceCueEmotion.isPlaying) 
//		{
//			if (this.gameObject.GetComponent<SoundDesignScript>().m_hasSFXBeenPlayedBefore[0] == true) 
//			{
//				Debug.Log ("audioSourceCueEmotion hasSFXBeenPlayedBefore[0] == true.");
//
//				this.gameObject.GetComponent<SoundDesignScript> ().m_hasSFXBeenPlayedBefore [0] = false;
//
////				m_value = plus;
////				StartCoroutine (CueSound());
//
//				InvokeRepeating("Test", 0.0f, 0.1f);
//
//				//ResetAllAudioSourcesVolumeSliders();
//			}
//			else if (this.gameObject.GetComponent<SoundDesignScript>().m_hasSFXBeenPlayedBefore[1] == true) 
//			{
//				Debug.Log ("audioSourceCueEmotion hasSFXBeenPlayedBefore[1] == true.");
//
//				this.gameObject.GetComponent<SoundDesignScript> ().m_hasSFXBeenPlayedBefore [1] = false;
//
////				m_value = plus;
////				StartCoroutine (CueSound());
//
//				InvokeRepeating("Test", 0.0f, 0.1f);
//
//				//ResetAllAudioSourcesVolumeSliders();
//			}
//			else if (fetchGameState.GetComponent<GameState>().m_playCueOnce == true) 
//			{
//				Debug.Log ("audioSourceCueEmotion hasSFXBeenPlayedBefore[1] == true.");
//
//				this.gameObject.GetComponent<GameState>().m_playCueOnce = false;
//
////				m_value = plus;
////				StartCoroutine (CueSound());
//
//				InvokeRepeating("Test", 0.0f, 0.1f);
//
//				//ResetAllAudioSourcesVolumeSliders();
//			}
//			//if (audioSourceMusique.volume < 1.0f) 
//			//{
////				InvokeRepeating("Test", 0.0f, 0.3f);
//
////				m_value = plus;
////				StartCoroutine (CueSound());
//
////				ResetAllAudioSourcesVolumeSliders();
//			//}
//		}
	}

	public void DetectAudioSources()
	{
		audioSourcesAttachedToTheSoundManager = this.gameObject.GetComponents<AudioSource> ();

		audioSourceData = audioSourcesAttachedToTheSoundManager [0];

		audioSourceBoutons = audioSourcesAttachedToTheSoundManager [1]; 

		audioSourceClicksEtTyping = audioSourcesAttachedToTheSoundManager [2];

		audioSourceCueEmotion = audioSourcesAttachedToTheSoundManager [3];

		audioSourceMusique = audioSourcesAttachedToTheSoundManager [4];
	} 

	public void ResetAllAudioSourcesVolumeSliders()
	{
		//for (int i = 0; i < audioSourcesAttachedToTheSoundManager.Length; i++)
		//{
			//if (this.gameObject.GetComponent<SoundDesignScript>().hasSFXBeenPlayedBefore[0] == true || this.gameObject.GetComponent<SoundDesignScript>().hasSFXBeenPlayedBefore[1] == true || fetchGameState.GetComponent<GameState>().playCueOnce == true) 
			//{
				for (int j = 0; j < 4; j++) 
				{
					audioSourcesAttachedToTheSoundManager [j].volume = 1.0f;
				}
			//} 
//			else
//			{
//				audioSourcesAttachedToTheSoundManager [i].volume = 1.0f;
//			}
		//}
	}

	public IEnumerator PlayAudio(AudioSource[] m_audioSource, AudioClip m_audioClip, AudioSource playSound)
	{
		playSound.PlayOneShot(m_audioClip, 1.0f); 

		float test = (5.0f / 20.0f);

		float autreTest = (1.0f / 20.0f); 

		for (int i = 0; i < m_audioSource.Length; i++)
		{
			for (int j = 0; j < 20; j++) 
			{
				m_audioSource [i].volume -= autreTest;
			}
		}

		float localFloat = m_audioClip.length;

		yield return new WaitForSeconds (localFloat);

		ResetAllAudioSourcesVolumeSliders ();
	}

	public IEnumerator CueSound()
	{
		for (int i = 0; i < 20; i++) 
		{
			audioSourceMusique.volume = m_value;
			yield return new WaitForSeconds(0.1f);
		}
	}
}